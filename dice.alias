<drac2>
al_name = 'dice'
footer = f'!{al_name} ? | Naive dice statistics calculator'

using(jh='65a30ab9-540c-4bdf-86ce-7af4760604a9')
jh.setup(
        al_name=al_name,
        footer=footer,
        )
using(dicelib='32d70259-223e-4fe1-8303-dbaa8189e859')

ch = character()
co = combat()

args = &ARGS&
p_args = argparse(args)

# Alias begins here
fs = []
warns = []
errs = []

desc = (f'Calculates statistics of simple dice expressions.\n\n'
        f'__Usage__:\n'
        f'`!{al_name} avg <dice_str>`\n'
        f'* Returns the average of the dice expression\n\n'
        f'`!{al_name} prob <dice_str> -dc <dc>`\n'
        f'* Returns the probability of the dice beating (equal or higher) the DC\n\n'
        f'`!{al_name} stats <dice_str> (-op <|=|>)`\n'
        f'* Returns statistical summary of the dice (min, max, avg, distribution, etc.)\n'
        f'* The `-op` argument controls the displayed distribution, whether to show "at most" (<), "equal" (=), '
        f'or "at least" (>)\n'
        f'  For example, `!{al_name} prob 1d20 -dc 13` should show the same probability as '
        f'`!{al_name} stats 1d20 -op >` at the value 13\n\n'
        f'You can also add a custom phrase at the end by adding `-phrase <your text>`, like so:\n'
        f'`!{al_name} prob 1d20+7 -dc 17 -phrase "Chance to hit Orc"`\n\n'
        f'**Setup**\n'
        f'You can set `!uvar diceDisplayWidth 30` to change the width of the distribution display '
        f'for `!{al_name} stats <dice_str>`. The default value is 20.')

def show_help():
    if errs:
        errs_s = '\n* '.join(['']+errs)
        fs.append({'title':'Error :x:', 'body':errs_s})
    return jh.embed(
        title='Dice Manual',
        desc=desc,
        fields=fs,
        f_thumb=None,
        )

if not args or args[0] in ['?', 'h', 'help']:
    return show_help()

SUBCS = ['avg', 'prob', 'stats']
DICE_UVAR = 'diceDisplayWidth'
try:
    display_width = max(2, int(get_uvar(DICE_UVAR, '20') or '20'))
except:
    display_width = 20

subc = args[0].lower()
if subc not in SUBCS:
    errs.append(f'Accepted first argument are {SUBCS} but found `{subc}`')
    return show_help()

k_args, l_args = jh.take_args(args, {'-dc':True, '-phrase':True, '-op':True})
if k_args['-phrase']:
    fs.append({'title':'Comment', 'body':'\n'.join(k_args['-phrase'])})

dice = ' '.join(l_args[1:])

if not dice:
    errs.append(f'Please specify a dice expression')

if subc == 'avg':
    if errs:
        return show_help()
    avg = dicelib.avg(dice)
    return jh.embed(
        title='Dice Average',
        desc=(f'Dice expression: {dice}\nAverage: {avg:.1f}'),
        fields=fs,
        f_thumb=None,
        )
elif subc == 'prob':
    dc = k_args['-dc']
    if dc == []:
        errs.append(f'Please specify a DC with `-dc <dc>`')
    if errs:
        return show_help()
    try:
        dc = int(dc[-1])
    except:
        dc = float(dc[-1])
    prob = dicelib.prob(dice, dc)
    return jh.embed(
        title='Dice Probability',
        desc=(f'Dice expression: {dice}\nDC: {dc}\nChance of success: {prob*100:.2f}%'),
        fields=fs,
        f_thumb=None,
        )
elif subc == 'stats':
    if errs:
        return show_help()
    op = (['=']+k_args['-op'])[-1]
    if op not in '<=>':
        warns.append({'title':'Warning :warning:',
                      'body':f'Operator `-op` needs to be one of "<", "=", ">". Found "{op}", defaulting to "=".'})
        op = '='
    op_s = {'<':'at most', '=':'exactly', '>':'at least'}[op]
    op_s = f'{op_s} ("{op}")'
    dist = dicelib.dist(dice)
    minval = min(v for v, n in dist)
    maxval = max(v for v, n in dist)
    maxlen = max(len(str(int(round(v)))) for v, n in dist)
    maxn = 0
    mode = 0
    modeidx = 0
    for i, (v, n) in enumerate(dist):
        if n > maxn:
            maxn = n
            mode = v
            modeidx = i
    start_idx = max(0, modeidx-20)
    end_idx = min(len(dist), modeidx+20+1)

    total = 0
    count = 0
    for v, n in dist:
        total += v*n
        count += n
    avg = total/count
    dist_s = []
    cumsum = 0
    for v, n in dist:
        cumsum += n
        if op == '<':
            n = cumsum
            maxn = 1
        elif op == '>':
            n = count-cumsum+n
            maxn = 1
        p = 100*n/count
        divisor = 100 / display_width
        fill = min(3*display_width, int(round((300*n/maxn)/divisor)))
        half = fill % 3
        half_c = ' ▒▓'[half]
        half = int(bool(half))
        fill = fill // 3
        empty = display_width - fill - half
        fill_c = '█'
        empty_c = ' '
        bar = f'`|{fill_c*fill}{half_c*half}{empty_c*empty}|` {p:.2f}%'
        dist_s.append(f'`{int(round(v)):>{maxlen}d}`: {bar}')
    if start_idx != 0 or end_idx != len(dist_s):
        dist_title = f'Distribution (truncated around mode):'
    else:
        dist_title = f'Distribution:'
    dist_s = dist_s[start_idx:end_idx]
    if start_idx != 0:
        dist_s.insert(0, '`...`')
    if end_idx != len(dist):
        dist_s.append('`...`')
    dist_s = '\n'.join(dist_s)
    return jh.embed(
        title='Dice Statistics',
        desc=(f'Dice expression: {dice}\n'
              f'Average: {avg:.1f}\n'
              f'Minimum: {minval:g}\n'
              f'Maximum: {maxval:g}\n'
              f'Mode: {mode:g}\n'
              f'Operator: {op_s}\n'
              f'{dist_title}\n{dist_s}'),
        fields=fs+warns,
        f_thumb=None,
        )
</drac2>
