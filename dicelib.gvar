# GVAR: 32d70259-223e-4fe1-8303-dbaa8189e859
# Module: dicelib (justhalf collection)
# Functions related to dice string processing such as maximizing or calculating average.
# The inputs are all assumed to be standard Avrae dice string, which may include comments [in square brackets] and
# other modifiers such as kh1, mi2, e4, ro<3, p>5, etc.

def normalize(dist):
    total_w = sum(n for v, n in dist)
    if total_w == 0: return [(0, 1)]
    return [(v, n/total_w) for v, n in dist]

DIS_DIST = [(1, 39), (2, 37), (3, 35), (4, 33), (5, 31),
            (6, 29), (7, 27), (8, 25), (9, 23), (10, 21),
            (11, 19), (12, 17), (13, 15), (14, 13), (15, 11),
            (16, 9), (17, 7), (18, 5), (19, 3), (20, 1)]
DIS_DIST = normalize(DIS_DIST)
ADV_DIST = [(1, 1), (2, 3), (3, 5), (4, 7), (5, 9),
            (6, 11), (7, 13), (8, 15), (9, 17), (10, 19),
            (11, 21), (12, 23), (13, 25), (14, 27), (15, 29),
            (16, 31), (17, 33), (18, 35), (19, 37), (20, 39)]
ADV_DIST = normalize(ADV_DIST)
EADV_DIST = [(1, 1), (2, 7), (3, 19), (4, 37), (5, 61),
             (6, 91), (7, 127), (8, 169), (9, 217), (10, 271),
             (11, 331), (12, 397), (13, 469), (14, 547), (15, 631),
             (16, 721), (17, 817), (18, 919), (19, 1027), (20, 1141)]
EADV_DIST = normalize(EADV_DIST)
PRECALC = {
        '3d20kh1': EADV_DIST,
        '2d20kh1': ADV_DIST,
        '2d20pl1': ADV_DIST,
        '2d20kl1': DIS_DIST,
        '2d20ph1': DIS_DIST,
        }

def maximize(dice):
    # Adds "miX" after every "ndX" where n is a digit and X is a number
    # This will work even if the dice is like "2d4 [bludgeoning]" since the "d" in "bludgeoning" is ignored
    die_sizes = dice.split('d')
    for idx in range(1, len(die_sizes)):
        if die_sizes[idx-1][-1] not in '0123456789':
            continue
        die_str = die_sizes[idx]
        non_int_idx = 0
        while non_int_idx < len(die_str) and die_str[non_int_idx] in '0123456789':
            non_int_idx += 1
        die_size = die_str[:non_int_idx]
        if die_size:
            die_sizes[idx] = f'{die_size}mi{die_size}{die_str[non_int_idx:]}'
    dice = 'd'.join(die_sizes)
    return dice

def prob(dice, dc):
    """Approximates the probability of the dice roll to be equal to the DC or higher"""
    if dc is None: err('Need a dc to calculate probability')
    return _calc(dice, dc)

def avg(dice):
    """Approximates the probability of the dice roll to be equal to the DC or higher"""
    return _calc(dice)

def dist(dice):
    """Returns the distribution of outcomes of this dice"""
    return _calc(dice, dc=0, raw=True)

def _calc(dice, dc=None, raw=False):
    """Approximates the average (if no dc) or probability (if dc is provided) of the dice roll.
    
    If raw is True, returns the distribution instead"""
    pos, neg = flat_parse(dice)
    mult = 1
    d_vals = {}
    # first item to record successes (for prob) / total (for avg), second item to record literals (for avg)
    result = [0, 0]
    if dc is None:
        err_msg = 'Cannot calculate average of complex dice'
    else:
        err_msg = 'Cannot calculate probability of complex dice'
    values = pos + [None] + neg
    dist_cache = {}
    def full_opcode_to_key(full_opcode):
        key = ''
        for opcode_key, opcode_val in full_opcode.items():
            if opcode_val is None:
                key = f'{key}{opcode_key}'
            elif typeof(opcode_val) in ['str', 'int']:
                key = f'{key}{opcode_key}{opcode_val}'
            else:
                opcode_val = list(opcode_val)
                opcode_val.sort()
                key = f'{key}{opcode_key}{opcode_val}'
        return key
    for val in values:
        if val is None:
            mult = -1
            continue
        if typeof(val) == 'Literal':
            # Literal is directly added to reduce DC, or saved in result[1]
            # Need to use .number and not .total, since dropped literal are not considered in .total
            if dc is None and not raw:
                result[1] += mult*val.number
            else:
                dc -= mult*val.number
        elif typeof(val) == 'Dice':
            # For dice, generate the distribution, potentially after applying the operations
            # Currently the supported operations are kl, kh, pl, ph, rr, ro, mi, ma, ra, e
            # For e, it's rerolled until the chance to reroll is less than 0.5%
            # rr is possible since it's essentially removing one value

            # The distribution of one die, will be updated by each operator
            one_die = [(v, 1/val.size) for v in range(1, val.size+1)]

            # dice_mult records how many times to repeat the one_die
            # This may change after kh/pl operation, with dice_mult set to 1 since kh/pl requires processing all
            # combination of dice values immediately
            dice_mult = val.num

            # A shortcode storing the current operator
            opcode = None
            full_opcode = {f'{val.num}d{val.size}':None}
            # The number specified in the selector
            num = None

            # Whether the dice has ra or e, after which, no more operators are accepted
            exploded = False
            for op_idx, operator in enumerate(val.operations):
                # The operating function
                op = None
                if operator.op == 'k':
                    if exploded: err('Cannot have more operators after e or ra')
                    # Group together the kX, k<X, and k>X, then optionally process khX, klX
                    # Then no more selectors are accepted. Throw error in that case, as too complex
                    kept = None
                    sel_idx = 0
                    while sel_idx < len(operator.sels):
                        sel = operator.sels[sel_idx]
                        if sel.cat == None:
                            if kept is None: kept = []
                            kept.append(sel.num)
                        elif sel.cat == '<':
                            if kept is None: kept = []
                            kept.extend([v for v, n in one_die if v < sel.num])
                        elif sel.cat == '>':
                            if kept is None: kept = []
                            kept.extend([v for v, n in one_die if v > sel.num])
                        else:
                            # kh or kl, break
                            break
                        sel_idx += 1
                    if kept is not None:
                        full_opcode['k'] = kept
                        one_die = normalize([(v, n if v in kept else 0) for v, n in one_die])
                    h_count = None
                    l_count = None
                    while sel_idx < len(operator.sels):
                        # There are more selectors after kX, k<X, and k>X
                        # Only a sequence of khX and klX are accepted, no more kX, k<X, and k>X
                        sel = operator.sels[sel_idx]
                        if sel.cat == 'h':
                            num = sel.num
                            if h_count is None:
                                h_count = num
                            else:
                                h_count = max(h_count, num)
                        elif sel.cat == 'l':
                            num = sel.num
                            if l_count is None:
                                l_count = num
                            else:
                                l_count = max(l_count, num)
                        else: # More kX, k<X, k>X, reject!
                            err('Cannot have k with literals after kh or kl')
                        sel_idx += 1
                    if kept is None and op_idx == 0:
                        # If there are literal selectors (kept is not None), no pre-calculation, so no opcode
                        # Otherwise, we define the opcode here
                        if h_count is not None:
                            opcode = f'{val.num}d{val.size}kh{h_count}'
                        if l_count is not None:
                            if opcode is not None: opcode = f'{opcode}kl{l_count}'
                            else: opcode = f'{val.num}d{val.size}kl{l_count}'
                    else:
                        opcode = None
                    if h_count is None and l_count is None: continue
                    # Now either h_count or l_count is not None, set the other to 0
                    if h_count is None: h_count = 0
                    if l_count is None: l_count = 0
                    if h_count + l_count >= val.num:
                        # Keeping all, no-op
                        # Continue to the next operator
                        continue
                    full_opcode['kh'] = h_count
                    full_opcode['kl'] = l_count
                    def op(l_):
                        l_.sort()
                        return sum(l_[:l_count]+l_[-h_count:])
                elif operator.op == 'p':
                    if exploded: err('Cannot have more operators after e or ra')
                    # Group together the pX, p<X, and p>X, then optionally process phX, plX
                    # Then no more selectors are accepted. Throw error in that case, as too complex
                    dropped = None
                    sel_idx = 0
                    while sel_idx < len(operator.sels):
                        sel = operator.sels[sel_idx]
                        if sel.cat == None:
                            if dropped is None: dropped = []
                            dropped.append(sel.num)
                        elif sel.cat == '<':
                            if dropped is None: dropped = []
                            dropped.extend([v for v, n in one_die if v < sel.num])
                        elif sel.cat == '>':
                            if dropped is None: dropped = []
                            dropped.extend([v for v, n in one_die if v > sel.num])
                        else:
                            break
                        sel_idx += 1
                    if dropped is not None:
                        full_opcode['p'] = dropped
                        one_die = normalize([(v, n if v not in dropped else 0) for v, n in one_die])
                    h_count = None
                    l_count = None
                    while sel_idx < len(operator.sels):
                        # There are more selectors after pX, p<X, and p>X
                        # Only a sequence of phX and plX are accepted, no more pX, p<X, and p>X
                        sel = operator.sels[sel_idx]
                        if sel.cat == 'h':
                            num = sel.num
                            if h_count is None:
                                h_count = num
                            else:
                                h_count = max(h_count, num)
                        elif sel.cat == 'l':
                            num = sel.num
                            if l_count is None:
                                l_count = num
                            else:
                                l_count = max(l_count, num)
                        else: # More pX, p<X, p>X, reject!
                            err('Cannot have p with literals after ph or pl')
                        sel_idx += 1
                    if dropped is None and op_idx == 0:
                        # If there are literal selectors (dropped is not None), no pre-calculation, so no opcode
                        # Otherwise, we define the opcode here
                        if h_count is not None:
                            opcode = f'{val.num}d{val.size}ph{h_count}'
                        if l_count is not None:
                            if opcode is not None: opcode = f'{opcode}pl{l_count}'
                            else: opcode = f'{val.num}d{val.size}pl{l_count}'
                    else:
                        opcode = None
                    if h_count is None and l_count is None: continue
                    if h_count is None: h_count = 0
                    if l_count is None: l_count = 0
                    if h_count + l_count == 0:
                        # Dropping none, no-op
                        # Continue to the next operator
                        continue
                    full_opcode['ph'] = h_count
                    full_opcode['pl'] = l_count
                    def op(l_):
                        l_.sort()
                        return sum(l_[l_count:-h_count])
                elif operator.op == 'rr':
                    if exploded: err('Cannot have more operators after e or ra')
                    # Remove the selected values from possible outcome
                    removed = set()
                    for sel in operator.sels:
                        # Using for loop since there could be multiple selectors like rr1rr3
                        if sel.cat is None:
                            removed.add(sel.num)
                        elif sel.cat == '<':
                            removed = removed.union(set(range(1, sel.num)))
                        elif sel.cat == '>':
                            removed = removed.union(set(range(sel.num+1, val.size+1)))
                        else:
                            # No such thing as rrhX or rrlX, vroll would have returned None, so this is unreachable
                            err(err_msg)
                    full_opcode['rr'] = removed
                    one_die = normalize([(v, n if v not in removed else 0) for v, n in one_die])
                    continue
                elif operator.op == 'ro':
                    if exploded: err('Cannot have more operators after e or ra')
                    # Re-distribute the removed values to other values, including itself
                    redistributed = set()
                    for sel in operator.sels:
                        # Using for loop since there could be multiple selectors like ro1ro3
                        if sel.cat is None:
                            redistributed.add(sel.num)
                        elif sel.cat == '<':
                            redistributed = redistributed.union(set(range(1, sel.num)))
                        elif sel.cat == '>':
                            redistributed = redistributed.union(set(range(sel.num+1, val.size+1)))
                        else:
                            # Not yet supported: rohX, rolX
                            # Initially I thought t is equivalent to phX + XdD and plX + XdD, so user can rephrase
                            # if needed, but it's not, if used with other roX. ro doesn't split the operations the
                            # way k or p does. 3d6ro2rol1ro1 means roll any 1 and 2 and the lowest number among the
                            # three d6. It does not reroll 2, then reroll lowest, then reroll 1.
                            err('Not supported yet: rohX and rolX')
                    full_opcode['ro'] = redistributed
                    one_die = dict(one_die)
                    redist_w = sum(one_die.get(v, 0) for v in redistributed)/len(one_die)
                    one_die = [(v, n*(v not in redistributed) + redist_w) for v, n in one_die.items()]
                    continue
                elif operator.op in ['e', 'ra']:
                    # Re-distribute the removed values proportional to the same die, but shifted
                    # ra is just e but only once
                    redistributed = set()
                    exploded = True
                    for sel in operator.sels:
                        # Using for loop since there could be multiple selectors like ra1ra3
                        if sel.cat is None:
                            redistributed.add(sel.num)
                        elif sel.cat == '<':
                            redistributed = redistributed.union(set(range(1, sel.num)))
                        elif sel.cat == '>':
                            redistributed = redistributed.union(set(range(sel.num+1, val.size+1)))
                        else:
                            # Not yet supported: rahX, ralX
                            # ra doesn't split the operations the way k or p does. 3d6ra2ral1ra1 means roll any 1 and
                            # 2 and the lowest number among the three d6.
                            # It does not: reroll 2, then reroll lowest, then reroll 1.

                            # No such thing as ehX or elX since it will never end
                            err('Not supported yet: rahX and ralX')
                    full_opcode[operator.op] = redistributed
                    key = full_opcode_to_key(full_opcode)
                    if key in dist_cache:
                        one_die = list(dist_cache[key])
                    else:
                        vanilla_one_die = dict((v, 1/val.size) for v in range(1, val.size+1))
                        tol = 0.0001**(4/(val.num+3)) # Stop exploding when it's too rare anyway
                        def explode(cur_dist):
                            redist_w = 0
                            for v in redistributed:
                                redist_w += cur_dist.get(v, 0)
                            if redist_w < tol: return cur_dist
                            # Always use vanilla die when rerolling
                            next_dist = dict((v, n*redist_w) for v, n in vanilla_one_die.items())
                            if operator.op == 'e':
                                next_dist = explode(next_dist)
                            new_dist = {}
                            for v in cur_dist:
                                if v in redistributed:
                                    for v_, n_ in next_dist.items():
                                        new_dist[v+v_] = new_dist.get(v+v_, 0) + n_
                                else:
                                    new_dist[v] = cur_dist[v]
                            return new_dist
                        one_die = explode(dict(one_die))
                        one_die = [(v, n) for v, n in one_die.items()]
                        dist_cache[key] = list(one_die)
                    continue
                elif operator.op == 'mi':
                    if exploded: err('Cannot have more operators after e or ra')
                    sel_num = operator.sels[0].num
                    if operator.sels[0].cat is None:
                        pass
                    elif operator.sels[0].cat in '<>':
                        # No such thing as mi<X or mi>X, vroll would have returned None, so this is unreachable
                        err(err_msg)
                    else:
                        # No such thing as mihX or milX, vroll would have returned None, so this is unreachable
                        err(err_msg)
                    if 'mi' in full_opcode:
                        full_opcode['mi'] = max(full_opcode['mi'], sel_num)
                    else:
                        full_opcode['mi'] = sel_num
                    below_min_w = sum(n for v, n in one_die if v <= sel_num)
                    # Keep 0s here, since the value is still eligible for reroll later
                    # For example, 1d4mi2ro<3, even though 1 is converted to 2 by mi2, it can still appear in the
                    # final result from the ro<3 allowing the 2 to be rerolled as 1
                    one_die = [(v, below_min_w if v == sel_num else 0 if v < sel_num else n) for v, n in one_die]
                    continue
                elif operator.op == 'ma':
                    if exploded: err('Cannot have more operators after e or ra')
                    sel_num = operator.sels[0].num
                    if operator.sels[0].cat is None:
                        pass
                    elif operator.sels[0].cat in '<>':
                        # No such thing as ma<X or ma>X, vroll would have returned None, so this is unreachable
                        err(err_msg)
                    else:
                        # No such thing as mahX or malX, vroll would have returned None, so this is unreachable
                        err(err_msg)
                    if 'ma' in full_opcode:
                        full_opcode['ma'] = min(full_opcode['ma'], sel_num)
                    else:
                        full_opcode['ma'] = sel_num
                    above_max_w = sum(n for v, n in one_die if v >= sel_num)
                    # Keep 0s here, since the value is still eligible for reroll later
                    # For example, 1d4ma3ro>2, even though 4 is converted to 3 by ma3, it can still appear in the
                    # final result from the ro>2 allowing the 3 to be rerolled as 4
                    one_die = [(v, above_max_w if v == sel_num else 0 if v > sel_num else n) for v, n in one_die]
                    continue
                else:
                    # Captures other new operators, future-proofing
                    err(f'Unsupported operation: {operator.op}')
                # Reaching here, must be kh/pl case, combine the dice
                key = full_opcode_to_key(full_opcode)
                if opcode in PRECALC:
                    one_die = PRECALC[opcode]
                    opcode = None
                elif key in dist_cache:
                    one_die = list(dist_cache[key])
                elif full_opcode.get('kh', 0) == 1 or full_opcode.get('kl', 0) == 1:
                    # Special optimization for kh1 and kl1
                    sorted_die = list(one_die)
                    sorted_die.sort(reverse=full_opcode.get('kl', 0) == 1)
                    prefix_sum = {}
                    cur_total = 0
                    for v, n in sorted_die:
                        cur_total += n
                        prefix_sum[v] = cur_total
                    one_die = []
                    prev_chance = 0
                    for v, n in prefix_sum.items():
                        cur_chance = n**dice_mult
                        one_die.append((v, cur_chance-prev_chance))
                        prev_chance = cur_chance
                    dist_cache[key] = list(one_die)
                else:
                    # No pre-calculation
                    one_die_ = {}
                    def g_(vals_, l_, n_):
                        if len(vals_) == 1:
                            for val, n in vals_[0]:
                                v = op(l_+[val])
                                if v not in one_die_:
                                    one_die_[v] = 0
                                one_die_[v] += n_*n
                        else:
                            for val, n in vals_[0]:
                                g_(vals_[1:], l_+[val], n_*n)
                    g_([one_die]*dice_mult, [], 1)
                    one_die = list(one_die_.items())
                    dist_cache[key] = list(one_die)
                dice_mult = 1

            # We have now finished processing this Dice, resulting in dice_mult * one_die distributions
            if dc is None and not raw:
                # For average, just calculate each Dice individually
                # dice_mult is number of dice (after aggregating those with kh/pl)
                # mult is +1 or -1
                result[1] += mult*dice_mult*sum(v*n for v,n in one_die)
            else:
                one_die = [(mult*v, round(n, 8)) for v, n in one_die if n > 0]
                one_die.sort()
                one_die = tuple(one_die)
                if one_die not in d_vals:
                    d_vals[one_die] = 0
                d_vals[one_die] += dice_mult
        elif typeof(val) == 'Set':
            # For set, we recursively call dist
            dice_mult = 1
            dist_set = [dist(_v) for _v in val.values]
            for op_idx, operator in enumerate(val.operations+[None]):
                # The operating function
                op = None
                opcode = None
                if operator is None:
                    # Pure parenthesis, sum
                    op = sum
                elif operator.op == 'k':
                    # Group together the kX, k<X, and k>X, then optionally process khX, klX
                    # Then no more selectors are accepted. Throw error in that case, as too complex
                    kept = None
                    sel_idx = 0
                    while sel_idx < len(operator.sels):
                        sel = operator.sels[sel_idx]
                        if sel.cat == None:
                            if kept is None: kept = []
                            kept.append(sel.num)
                        elif sel.cat == '<':
                            if kept is None: kept = []
                            for one_die in dist_set:
                                kept.extend([v for v, n in one_die if v < sel.num])
                        elif sel.cat == '>':
                            if kept is None: kept = []
                            for one_die in dist_set:
                                kept.extend([v for v, n in one_die if v > sel.num])
                        else:
                            # kh or kl, break
                            break
                        sel_idx += 1
                    if kept is not None:
                        for idx, one_die in enumerate(dist_set):
                            one_die = normalize([(v, n if v in kept else 0) for v, n in one_die])
                            dist_set[idx] = one_die
                    h_count = None
                    l_count = None
                    while sel_idx < len(operator.sels):
                        # There are more selectors after kX, k<X, and k>X
                        # Only a sequence of khX and klX are accepted, no more kX, k<X, and k>X
                        sel = operator.sels[sel_idx]
                        if sel.cat == 'h':
                            num = sel.num
                            opcode = f'kh{num}'
                            if h_count is None:
                                h_count = num
                            else:
                                h_count = max(h_count, num)
                        elif sel.cat == 'l':
                            num = sel.num
                            opcode = f'kl{num}'
                            if l_count is None:
                                l_count = num
                            else:
                                l_count = max(l_count, num)
                        else: # More kX, k<X, k>X, reject!
                            err('Cannot have k with literals after kh or kl')
                        sel_idx += 1
                    if h_count is None and l_count is None: continue
                    # Now either h_count or l_count is not None, set the other to 0
                    if h_count is None: h_count = 0
                    if l_count is None: l_count = 0
                    def op(l_):
                        l_.sort()
                        return sum(l_[:l_count]+l_[-h_count:])
                elif operator.op == 'p':
                    # Group together the pX, p<X, and p>X, then optionally process phX, plX
                    # Then no more selectors are accepted. Throw error in that case, as too complex
                    dropped = None
                    sel_idx = 0
                    while sel_idx < len(operator.sels):
                        sel = operator.sels[sel_idx]
                        if sel.cat == None:
                            if dropped is None: dropped = []
                            dropped.append(sel.num)
                        elif sel.cat == '<':
                            if dropped is None: dropped = []
                            for one_die in dist_set:
                                dropped.extend([v for v, n in one_die if v < sel.num])
                        elif sel.cat == '>':
                            if dropped is None: dropped = []
                            for one_die in dist_set:
                                dropped.extend([v for v, n in one_die if v > sel.num])
                        else:
                            break
                        sel_idx += 1
                    if dropped is not None:
                        for idx, one_die in enumerate(dist_set):
                            one_die = normalize([(v, n if v not in dropped else 0) for v, n in one_die])
                            dist_set[idx] = one_die
                    h_count = None
                    l_count = None
                    while sel_idx < len(operator.sels):
                        # There are more selectors after pX, p<X, and p>X
                        # Only a sequence of phX and plX are accepted, no more pX, p<X, and p>X
                        sel = operator.sels[sel_idx]
                        if sel.cat == 'h':
                            num = sel.num
                            opcode = f'ph{num}'
                            if h_count is None:
                                h_count = num
                            else:
                                h_count = max(h_count, num)
                        elif sel.cat == 'l':
                            num = sel.num
                            opcode = f'pl{num}'
                            if l_count is None:
                                l_count = num
                            else:
                                l_count = max(l_count, num)
                        else: # More pX, p<X, p>X, reject!
                            err('Cannot have p with literals after ph or pl')
                        sel_idx += 1
                    if h_count is None and l_count is None: continue
                    if h_count is None: h_count = 0
                    if l_count is None: l_count = 0
                    def op(l_):
                        l_.sort()
                        return sum(l_[l_count:-h_count])
                else:
                    err(f'The only possible operators for a set are k and l, found "{operator.op}"')
                if opcode in ['kh1', 'kl1']:
                    # Special optimization for kh1 and kl1
                    def sorted(one_die):
                        result = list(one_die)
                        result.sort(reverse=opcode=='kl1')
                        return result
                    dist_set = [sorted(one_die) for one_die in dist_set]
                    dist_values = {}
                    def cumsum(sorted_die):
                        prefix_sum = {}
                        cur_total = 0
                        for v, n in sorted_die:
                            cur_total += n
                            prefix_sum[v] = cur_total
                            dist_values[v] = 0
                        return prefix_sum
                    prefix_sums = [cumsum(sorted_die) for sorted_die in dist_set]
                    dist_values = list(dist_values.keys())
                    dist_values.sort()
                    for prefix_sum in prefix_sums:
                        last_n = 0
                        for v in dist_values:
                            prefix_sum[v] = prefix_sum.get(v, last_n)
                            last_n = prefix_sum[v]
                    one_die = []
                    prev_chance = 0
                    for v in dist_values:
                        cur_chance = 1
                        for prefix_sum in prefix_sums:
                            cur_chance *= prefix_sum.get(v, 0)
                        prev_chance, cur_chance = cur_chance, cur_chance-prev_chance
                        one_die.append((v, cur_chance))
                    dist_set = [one_die]
                else:
                    one_die_ = {}
                    def g_(vals_, l_, n_):
                        if len(vals_) == 1:
                            for val, n in vals_[0]:
                                v = op(l_+[val])
                                if v not in one_die_:
                                    one_die_[v] = 0
                                one_die_[v] += n_*n
                        else:
                            for val, n in vals_[0]:
                                g_(vals_[1:], l_+[val], n_*n)
                    g_(dist_set, [], 1)
                    dist_set = [list(one_die_.items())]
            one_die = dist_set[0]
            if dc is None and not raw:
                # For average, just calculate each Dice individually
                # dice_mult is number of dice (after aggregating those with kh/pl)
                # mult is +1 or -1
                result[1] += mult*dice_mult*sum(v*n for v,n in one_die)
            else:
                one_die = [(mult*v, round(n, 8)) for v, n in one_die if n > 0]
                one_die.sort()
                one_die = tuple(one_die)
                if one_die not in d_vals:
                    d_vals[one_die] = 0
                d_vals[one_die] += dice_mult
    if dc is None and not raw:
        # For average, we know the result already now
        return result[1]
    # Convert vals dict to vals list
    vals = []
    cache = [{}]
    def coalesce(one_die, dice_mult):
        if dice_mult == 1: return one_die
        if dice_mult in cache[0]: return cache[0][dice_mult]
        even = coalesce(one_die, dice_mult//2)
        if dice_mult % 2 == 1:
            odd = coalesce(one_die, dice_mult - dice_mult//2)
        else:
            odd = even
        result = {}
        for v1, n1 in even:
            for v2, n2 in odd:
                v3 = v1+v2
                if v3 not in result: result[v3] = 0
                result[v3] += n1*n2
        result = list(result.items())
        cache[0][dice_mult] = result
        return result
    for one_die, dice_mult in d_vals.items():
        # Reset cache and combine dice with the same distributions together
        cache[0] = {}
        vals.append(coalesce(one_die, dice_mult))
    if not vals:
        vals = [[(0, 1)]]
    vals.sort(key=len, reverse=True)
    # Each value in vals is a distribution (list of 2-tuple: (value, prob))
    while len(vals) > 1:
        # Combine the two smallest dice outcome distribution
        l1, l2 = vals.pop(), vals.pop()
        l3 = {}
        for v1, n1 in l1:
            for v2, n2 in l2:
                v3 = v1+v2
                if v3 not in l3: l3[v3] = 0
                l3[v3] += n1*n2
        l3 = list(l3.items())
        # Push back the combined distribution
        inserted = False
        for i in range(len(vals), 0, -1):
            if len(vals[i-1]) >= len(l3):
                vals.insert(i, l3)
                inserted = True
                break
        if not inserted: vals.insert(0, l3)
    vals = vals[0]
    if raw:
        # Returns the distribution
        result = [(v-dc, n) for v, n in vals]
        result.sort()
        return result
    # Calculate prob of beating dc
    for v, n in vals:
        result[0] += n*int(v>=dc)
    return result[0]

def flat_parse(dice):
    """Parses the dice string into two groups: expressions added and expressions subtracted
    """
    try:
        if typeof(dice) == 'str':
            expr = vroll(dice).raw.roll
        elif typeof(dice) in ['Expression', 'Literal', 'UnOp', 'BinOp', 'Parenthetical', 'Set', 'Dice', 'Die']:
            expr = dice
        else:
            expr = dice.raw.roll
    except:
        err(f'Not a valid dice expression: {dice}')
    pos = []
    neg = []
    def _flat_parse(expr, is_neg):
        if expr is None: return
        if typeof(expr) in ['Literal', 'Dice', 'Set']:
            # Base case: add Literal, Dice, and Set
            if is_neg: neg.append(expr)
            else: pos.append(expr)
            return
        elif typeof(expr) == 'BinOp':
            _flat_parse(expr.left, is_neg)
            if expr.op == '-':
                _flat_parse(expr.right, not is_neg)
            elif expr.op == '+':
                _flat_parse(expr.right, is_neg)
        elif typeof(expr) == 'UnOp':
            if expr.op == '-':
                _flat_parse(expr.value, not is_neg)
            elif expr.op == '+':
                _flat_parse(expr.value, is_neg)
        elif typeof(expr) == 'Parenthetical':
            _flat_parse(expr.value, is_neg)
    _flat_parse(expr, False)
    return pos, neg

def dfs(dice, accept=None, func=None, nested=True):
    if typeof(dice) == 'str':
        expr = vroll(dice).raw.roll
    elif typeof(dice) in ['Expression', 'Literal', 'UnOp', 'BinOp', 'Parenthetical', 'Set', 'Dice', 'Die']:
        expr = dice
    else:
        expr = dice.raw.roll
    result = []
    def _dfs(expr):
        if accept is not None:
            if accept(expr):
                result.append(expr)
            if not nested: return
        try:
            if expr.left is not None:
                _dfs(expr.left)
        except:
            pass
        try:
            if expr.right is not None:
                _dfs(expr.right)
        except:
            pass
        try:
            if expr.value is not None:
                for child in expr.values:
                    _dfs(child)
        except:
            pass
        try:
            if expr.values is not None:
                for child in expr.values:
                    _dfs(child)
        except:
            pass
        if func is not None:
            func(expr)
    _dfs(expr)
    return result

