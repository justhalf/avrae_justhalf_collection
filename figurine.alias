<drac2>
al_name = 'figurine'
footer = f'!{al_name} ? | Figurine of Wondrous Power automation'

using(jh='65a30ab9-540c-4bdf-86ce-7af4760604a9')
jh.setup(
        al_name=al_name,
        footer=footer,
        )

ch = character()

args = &ARGS&
p_args = argparse(args)

# Alias begins here

using(init_add='f48672c2-8f25-4170-ba39-d5f6ffd38bd3')

fig_forms = {
        'Bronze Griffon': {'name':'Griffon', 'size':'L (Large)', 'dur':3600, 'cd':5, 'ccmax':1},
        'Ebony Fly': {'name':'Giant Fly', 'size':'L (Large)', 'dur':7200, 'cd':2, 'ccmax':1},
        'Golden Lions': {'name':'Lion', 'size':'L (Large)', 'dur':600, 'cd':7, 'ccmax':2},
        'Goat of Travelling': {'name':'Giant Goat', 'size':'L (Large)', 'dur':14400, 'cd':7, 'ccmax':1},
        'Goat of Travail': {'name':'Giant Goat', 'size':'L (Large)', 'dur':1800, 'cd':30, 'ccmax':1},
        'Goat of Terror': {'name':'Giant Goat', 'size':'L (Large)', 'dur':1800, 'cd':15, 'ccmax':1},
        'Marble Elephant': {'name':'Elephant', 'size':'H (Huge)', 'dur':14400, 'cd':7, 'ccmax':1},
        'Obsidian Steed': {'name':'Nightmare', 'size':'L (Large)', 'dur':14400, 'cd':5, 'ccmax':1},
        'Onyx Dog': {'name':'Mastiff', 'size':'M (Medium)', 'dur':3600, 'cd':7, 'ccmax':1},
        'Serpentine Owl': {'name':'Giant Owl', 'size':'L (Large)', 'dur':4800, 'cd':2, 'ccmax':1},
        'Silver Raven': {'name':'Raven', 'size':'T (Tiny)', 'dur':7200, 'cd':2, 'ccmax':1},
        'Carnelian Triceratops': {'name':'Triceratops', 'size':'H (Huge)', 'dur':7200, 'cd':4, 'ccmax':1},
        'Kyanite Pteranodon': {'name':'Pteranodon', 'size':'M (Medium)', 'dur':7200, 'cd':4, 'ccmax':1},
        'Pyrite Plesiosaurus': {'name':'Plesiosaurus', 'size':'L (Large)', 'dur':7200, 'cd':4, 'ccmax':1},
        }

fig_s = '\n* '.join(['']+[k for k, v in fig_forms.items()])

emb_help = {
        'title':'Figurine of Wondrous Power Manual',
        'desc':(f'As an action, you can throw a figurine of wondrous power to a point on the ground within 60 feet '
                f'of yourself while speaking a command word, whereupon the figurine magically transforms into a '
                f'living creature. If the space where the creature would appear is occupied by other creatures or '
                f'objects, or if there isn\'t enough space for the creature, the figurine doesn\'t become a creature.\n\n'
                f'The creature is friendly to you and your companions. It understands your languages and obeys your '
                f'spoken commands. If you issue no commands, the creature defends itself but takes no other actions. '
                f'See the [Monster Manual](https://www.dndbeyond.com/sources/mm) for the creature\'s statistics.\n\n'
                f'At the end of the duration, the creature reverts to its statuette form. It reverts to a figurine '
                f'early if it drops to 0 hit points or if you use an action to speak the command word again while '
                f'touching it'),
        'fields':[
            {'title':'__Usage__',
             'body':(f'`!{al_name} <figurine_name> (-loc <location>) <otherInitArgs>`\n'
                     f'* `figurine_name` can be any of the available figurine forms specified below.\n'
                     f'* Specify a location to summon the creature on that location. Other init arguments, such as '
                     f'`-name`, `-group`, and `-p` can also be supplied. It will be passed along to the `!madd` '
                     f'command.\n'
                     f'* Special interaction with `-h`: by default, this alias will unhide the stats. '
                     f'You can undo this by specifying `-h` to this alias, which will make the stats hidden.\n'
                     f'* Special interaction with `-group`: by default, this alias will assign the creature into the '
                     f'same group as your active character (if in combat). If you specify `-group` and your active '
                     f'character is not in any group, it will be assigned to that group. If your character is not '
                     f'in any groups, a new group will be made, based on the character\'s initials.\n\n'
                     f'This alias uses the CC "Figurine of Wondrous Power: <name>" to detect whether you can summon '
                     f'the creature. If it does not exist, it will be created.'),
             },
            {'title':'__Figurine Forms__',
             'body':fig_s,
             },
            {'title':'__Examples__',
             'body':(f'To summon Plesiosaurus at B4:\n'
                     f'* `!{al_name} plesi -loc b4`\n'
                     f'To summon Onyx Dog named "Spotty" in a group:\n'
                     f'* `!{al_name} dog -name Spotty -group Ninja -loc a1`')
             },
            {'title':'__Pre-configured Settings__',
             'body':(f'You may also want to keep the same summon name and same group name for the same figurine. '
                     f'In that case, you can set up a cvar that contains the arguments that will be used as default '
                     f'arguments when you do not supply them. You can run:\n'
                     f'* `!{al_name} setup <figurine_name> <anyInitArgs>`\n'
                     f'This will set the arguments specified as default arguments for the specific figurine.\n'
                     f'So if you do `!{al_name} setup plesi -name Lapras`, when you call `!{al_name} plesi` it will '
                     f'use Lapras as the name.')
             },
            ],
        }
if not args or args[0] in ['?', 'help']:
    return jh.embed(**emb_help)

def is_loc(loc):
    letters = 'ABCDEFGHIJKLMNOPQRSTUVWYZ'
    numbers = '0123456789'
    if loc[0] not in letters: return False
    first = True
    for c in loc[1:]:
        if first:
            if c in numbers:
                first = False
            elif c not in letters:
                return False
        else:
            if c not in numbers:
                return False
    return not first

def escape(v):
    return v.replace('"', '\\"')

cvar_name = 'figurineConfig'
c_config = load_json(ch.get_cvar(cvar_name, '{}'))
if args[0] == 'setup':
    do_setup = True
    args = args[1:]
    if not args:
        # Only call to setup, show the current config
        s_setup = []
        for _fig, _config in c_config.items():
            s_config = ' '.join(f'"{escape(v)}"' for v in _config)
            s_setup.append(f'{_fig}: `{s_config}`')
        if not s_setup:
            s_setup = f'You do not have any existing figurine setup. Start one with `!{al_name} setup <initArgs>`.'
        else:
            s_setup = '\n* '.join(['Current figurine setup:']+s_setup)
        return jh.embed(
            title=f'{ch.name} looks at their figurine setup!',
            desc=s_setup,
            )
else:
    do_setup = False

fig_name = args[0].lower()
fig_key = [k for k in fig_forms if k.lower() == fig_name.lower()]
if fig_key:
    fig_key = fig_key[0]
else:
    fig_key = [k for k in fig_forms if fig_name.lower() in k.lower()]
    if not fig_key:
        emb_help['fields'].append({'title':'Error','body':f'No figurine matches `{fig_name}`'})
        return jh.embed(**emb_help)
    elif len(fig_key) > 1:
        emb_help['fields'].append({'title':'Error','body':f'Multiple figurines match `{fig_name}`'})
        return jh.embed(**emb_help)
    fig_key = fig_key[0]
fig = fig_forms[fig_key]

if not do_setup:
    args = args + c_config.get(fig_key, [])
else:
    if args[1:]:
        c_config[fig_key] = args[1:]
        title = f'{ch.name} sets up default config for {fig_key}!'
    else:
        c_config = {k:v for k,v in c_config.items() if k != fig_key}
        title = f'{ch.name} removes the default config for {fig_key}!'
    ch.set_cvar(cvar_name, dump_json(c_config))
    s_setup = []
    for _fig, _config in c_config.items():
        s_config = ' '.join(f'"{escape(v)}"' for v in _config)
        s_setup.append(f'{_fig}: `{s_config}`')
    if not s_setup:
        s_setup = f'You do not have any existing figurine setup. Start one with `!{al_name} setup <initArgs>`.'
    else:
        s_setup = '\n* '.join(['Current figurine setup:']+s_setup)
    return jh.embed(
        title=title,
        desc=s_setup,
        )

k_args, l_args = jh.take_args(args, {'-loc':True, '-h':False, '-group':True, '-p':True, '-i':False})

warns = []
loc = (k_args['-loc'] or [None])[0]
if loc is not None:
    loc = loc.upper()
    if not is_loc(loc):
        warns.append({'title':'Warning', 'body':f'Invalid location. Found instead: `{loc}`. No location set.'})
        loc_s = ''
    else:
        loc_s = f' | Location: {loc}'
else:
    loc_s = ''

hidden = bool(k_args['-h']%2)
group = (k_args['-group'] or [None])[0]
init = (k_args['-p'] or [None])[0]
if init is not None:
    init = int(init)

cc_name = f'Figurine of Wondrous Power: {fig_key}'
if not ch.cc_exists(cc_name):
    ch.create_cc(cc_name, minVal=0, maxVal=fig["ccmax"], reset='long', dispType='bubble')
    warns.append({'title':'CC Created',
                  'body':(f'The CC "{cc_name}" was created with the following command:\n'
                          f'`!cc create "{cc_name}" -min 0 -max {fig["ccmax"]} -type bubble -reset long`'),
                  })
if not k_args['-i'] and ch.get_cc(cc_name) == 0:
    return jh.embed(
        title=f'The figurine still cannot be used!',
        desc=(f'You have used your figurine recently, it cannot be used until {fig["cd"]} days have passed.\n\n'
              f'**{cc_name}**\n{ch.cc_str(cc_name)}'),
        )

# Reduce CC
if not k_args['-i']:
    ch.mod_cc(cc_name, -1)
    cc_str = f'{ch.cc_str(cc_name)} (-1)'
else:
    cc_str = 'CC ignored! (`-i`)'

co = combat()
if not co or not co.me:
    return jh.embed(
        title=f'{jh.C[jh.CH_NAME]} summons a {fig_key}!',
        desc=emb_help['desc'],
        fields=[
            {'title':cc_name,
             'body':cc_str,
             },
            {'title':'Warning',
             'body':'You are not in initiative, no actual creature was summoned into combat.',
             }
            ]+warns,
        )

cur_group = None
for co_group in co.groups:
    if co_group.get_combatant(co.me.name):
        cur_group = co_group.name
if not group:
    group = cur_group
if not group:
    group = init_add.get_initials(co.me.name).replace('"', '\\"')

if cur_group is None:
    my_name = co.me.name.replace('"','\\"')
    add_group_s = f'!i opt "{my_name}" -group "{group}"'
else:
    add_group_s = None

if init is None:
    init = co.me.init

madd_args = [arg.replace('"', '\\"') for arg in l_args]
madd_args = [f'"{arg}"' for arg in madd_args]
madd_args = ' '.join(madd_args+['-h']*(not hidden)+[f'-p {init}']+[f'-group "{group}"'])

emb_out = jh.embed(
    title=f'{jh.C[jh.CH_NAME]} summons a {fig_key}!',
    desc=emb_help['desc'],
    fields=[
        {'title':f'{fig_key} summoned!',
         'body':f'Size: {fig["size"]}{loc_s}\nGroup: {group}\nInitiative: {init}',
         },
        {'title':cc_name,
         'body':cc_str,
         },
        ]+warns,
    )
ml_commands = ['multiline',
       f'!i madd "{fig["name"]}" {madd_args} -note "Size: {fig["size"]} | Color: b (blue){loc_s}"',
       f'!{emb_out}',
       ]
if add_group_s:
    ml_commands.insert(1, add_group_s)
out = '\n'.join(ml_commands)
return out
</drac2>
